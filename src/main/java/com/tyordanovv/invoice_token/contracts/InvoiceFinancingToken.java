package com.tyordanovv.invoice_token.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.12.1.
 */
@SuppressWarnings("rawtypes")
public class InvoiceFinancingToken extends Contract {
    public static final String BINARY = "608060405234801561000f575f80fd5b50336040518060400160405280601581526020017f496e766f69636546696e616e63696e67546f6b656e00000000000000000000008152506040518060400160405280600381526020016212519560ea1b815250815f908161007191906101ab565b50600161007e82826101ab565b5050506001600160a01b0381166100ae57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b6100b7816100c2565b506001600755610265565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061013b57607f821691505b60208210810361015957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156101a657805f5260205f20601f840160051c810160208510156101845750805b601f840160051c820191505b818110156101a3575f8155600101610190565b50505b505050565b81516001600160401b038111156101c4576101c4610113565b6101d8816101d28454610127565b8461015f565b6020601f82116001811461020a575f83156101f35750848201515b5f19600385901b1c1916600184901b1784556101a3565b5f84815260208120601f198516915b828110156102395787850151825560209485019460019092019101610219565b508482101561025657868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b612696806102725f395ff3fe60806040526004361061018a575f3560e01c806370a08231116100df578063bb24b73211610083578063d88651b811610060578063d88651b814610475578063e1e158a514610488578063e985e9c5146104a3578063f2fde38b146104c257005b8063bb24b73214610418578063c4f2b2ed14610437578063c87b56dd1461045657005b806395d89b41116100bc57806395d89b41146103a7578063a22cb465146103bb578063a6e158f8146103da578063b88d4fde146103f957005b806370a0823114610357578063715018a6146103765780638da5cb5b1461038a57005b806342842e0e116101465780636112fe2e116101235780636112fe2e146102ef5780636352211e1461030e5780636536c9ac1461032d5780636f7581401461034f57005b806342842e0e146102705780634e6d14051461028f57806354ed08c8146102c357005b806301ffc9a71461019357806306fdde03146101c7578063081812fc146101e8578063095ea7b31461021f57806323b872dd1461023e578063301c5b901461025d57005b3661019157005b005b34801561019e575f80fd5b506101b26101ad36600461200c565b6104e1565b60405190151581526020015b60405180910390f35b3480156101d2575f80fd5b506101db610532565b6040516101be9190612055565b3480156101f3575f80fd5b50610207610202366004612067565b6105c1565b6040516001600160a01b0390911681526020016101be565b34801561022a575f80fd5b50610191610239366004612099565b6105e8565b348015610249575f80fd5b506101916102583660046120c1565b6105f7565b61019161026b3660046120fb565b610685565b34801561027b575f80fd5b5061019161028a3660046120c1565b61089f565b34801561029a575f80fd5b506102ae6102a9366004612067565b6108be565b6040516101be9998979695949392919061211b565b3480156102ce575f80fd5b506102e26102dd366004612179565b6109a0565b6040516101be9190612192565b3480156102fa575f80fd5b50610191610309366004612067565b610a09565b348015610319575f80fd5b50610207610328366004612067565b610afa565b348015610338575f80fd5b50610341605081565b6040519081526020016101be565b610191610b04565b348015610362575f80fd5b50610341610371366004612179565b610b99565b348015610381575f80fd5b50610191610bde565b348015610395575f80fd5b506006546001600160a01b0316610207565b3480156103b2575f80fd5b506101db610bef565b3480156103c6575f80fd5b506101916103d53660046121d4565b610bfe565b3480156103e5575f80fd5b506101916103f4366004612067565b610c09565b348015610404575f80fd5b50610191610413366004612221565b610ee9565b348015610423575f80fd5b50610341610432366004612179565b610f01565b348015610442575f80fd5b506102e2610451366004612179565b61111e565b348015610461575f80fd5b506101db610470366004612067565b6111ce565b6101916104833660046122fe565b61123f565b348015610493575f80fd5b5061034167016345785d8a000081565b3480156104ae575f80fd5b506101b26104bd36600461239b565b611602565b3480156104cd575f80fd5b506101916104dc366004612179565b61162f565b5f6001600160e01b031982166380ac58cd60e01b148061051157506001600160e01b03198216635b5e139f60e01b145b8061052c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60605f8054610540906123cc565b80601f016020809104026020016040519081016040528092919081815260200182805461056c906123cc565b80156105b75780601f1061058e576101008083540402835291602001916105b7565b820191905f5260205f20905b81548152906001019060200180831161059a57829003601f168201915b5050505050905090565b5f6105cb82611669565b505f828152600460205260409020546001600160a01b031661052c565b6105f38282336116a1565b5050565b6001600160a01b03821661062557604051633250574960e11b81525f60048201526024015b60405180910390fd5b5f6106318383336116ae565b9050836001600160a01b0316816001600160a01b03161461067f576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161061c565b50505050565b61068d6117a0565b5f828152600860205260409020600681015460ff1615806106b2575080600301544210155b156106d357604051631e9f000d60e21b81526004810184905260240161061c565b60018101546106e29083612418565b341461071b57348160010154836106f99190612418565b6040516311ebdab360e21b81526004810192909252602482015260440161061c565b806007015482111561075057600781015460405163c7bcc1b960e01b815261061c918491600401918252602082015260400190565b81816007015f828254610763919061242f565b909155505f90505b828110156107c4575f61077d856117ca565b6004840154909150610799906001600160a01b0316338361185b565b335f908152600c6020908152604082208054600181810183559184529190922001919091550161076b565b5060048101546040515f916001600160a01b03169034908381818185875af1925050503d805f8114610811576040519150601f19603f3d011682016040523d82523d5f602084013e610816565b606091505b50509050806108575760048281015460405162103ef760ea1b81526001600160a01b039091169181019190915233602482015234604482015260640161061c565b60408051848152346020820152339186917f726707221b1397ea93462b58bb2f45ac536dd9b426c3b3647f18f27f439a2dbf910160405180910390a350506105f36001600755565b6108b983838360405180602001604052805f815250610ee9565b505050565b600860208190525f918252604090912080546001820154600283015460038401546004850154600586015460068701546007880154988801805497999698959794966001600160a01b0390941695929460ff90921693929161091f906123cc565b80601f016020809104026020016040519081016040528092919081815260200182805461094b906123cc565b80156109965780601f1061096d57610100808354040283529160200191610996565b820191905f5260205f20905b81548152906001019060200180831161097957829003601f168201915b5050505050905089565b6001600160a01b0381165f908152600c60209081526040918290208054835181840281018401909452808452606093928301828280156109fd57602002820191905f5260205f20905b8154815260200190600101908083116109e9575b50505050509050919050565b610a116117a0565b805f610a1c33610f01565b335f9081526009602052604081205491925090610a3a90839061242f565b905082811015610a6757604051632c1f8ef160e21b8152600481018290526024810184905260440161061c565b335f9081526009602052604081208054869290610a8590849061242f565b9091555050604051339085156108fc029086905f818181858888f19350505050158015610ab4573d5f803e3d5ffd5b5060405184815233907fc30fcfbcaac9e0deffa719714eaa82396ff506a0d0d0eebe170830177288715d9060200160405180910390a2505050610af76001600755565b50565b5f61052c82611669565b610b0c6117a0565b67016345785d8a0000341015610b355760405163fbd85bc360e01b815260040160405180910390fd5b335f9081526009602052604081208054349290610b53908490612442565b909155505060405134815233907fd7243f6f8212d5188fd054141cf6ea89cfc0d91facb8c3afe2f88a13584801429060200160405180910390a2610b976001600755565b565b5f6001600160a01b038216610bc3576040516322718ad960e21b81525f600482015260240161061c565b506001600160a01b03165f9081526003602052604090205490565b610be6611908565b610b975f611935565b606060018054610540906123cc565b6105f3338383611986565b610c116117a0565b5f8181526008602052604090206004015481906001600160a01b03163314610c6c5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b604482015260640161061c565b5f8281526008602052604090206003810154421015610cad576003810154604051631943ae1760e31b8152426004820152602481019190915260440161061c565b5f81600701548260020154610cc2919061242f565b90505f826001015482610cd59190612418565b60048401549091506001600160a01b031631811115610d285760048381015460405163f91e1f0760e01b81526001600160a01b03909116918101919091523360248201526044810182905260640161061c565b5f5b8360020154811015610e79575f846009018281548110610d4c57610d4c612455565b905f5260205f20015490505f610d6182610afa565b90506001600160a01b0381163314610e6f576004860154610d8d9082906001600160a01b03168461185b565b336001600160a01b0316827f5c045d5da3a7e00ae951ce5f24095b438bfc8c041d01a14b3f5c46b89d6871f28860010154604051610dcd91815260200190565b60405180910390a360018601546040515f916001600160a01b038416918381818185875af1925050503d805f8114610e20576040519150601f19603f3d011682016040523d82523d5f602084013e610e25565b606091505b5050905080610e6d576004878101546001890154604051635b83b6e160e01b81526001600160a01b03928316938101939093529084166024830152604482015260640161061c565b505b5050600101610d2a565b5060068301805460ff191690556004830154610e9e906001600160a01b031686611a24565b6040805183815260208101839052339187917f887d2394d1ad324612a23b35bba07e9d9d2a3401acf775233b363f69e9caacf9910160405180910390a350505050610af76001600755565b610ef48484846105f7565b61067f3385858585611ade565b6001600160a01b0381165f908152600a6020908152604080832080548251818502810185019093528083528493830182828015610f5b57602002820191905f5260205f20905b815481526020019060010190808311610f47575b505050505090505f5b8151811015611117575f60085f848481518110610f8357610f83612455565b60209081029190910181015182528181019290925260409081015f20815161014081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546001600160a01b03166080830152600581015460a0830152600681015460ff16151560c0830152600781015460e08301526008810180546101008401919061101a906123cc565b80601f0160208091040260200160405190810160405280929190818152602001828054611046906123cc565b80156110915780601f1061106857610100808354040283529160200191611091565b820191905f5260205f20905b81548152906001019060200180831161107457829003601f168201915b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156110e757602002820191905f5260205f20905b8154815260200190600101908083116110d3575b50505050508152505090508060c001511561110e5760a081015161110b9085612442565b93505b50600101610f64565b5050919050565b6060336001600160a01b038316146111695760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b604482015260640161061c565b6001600160a01b0382165f908152600a6020908152604091829020805483518184028101840190945280845290918301828280156109fd57602002820191905f5260205f20908154815260200190600101908083116109e95750505050509050919050565b60606111d982611669565b505f6111ef60408051602081019091525f815290565b90505f81511161120d5760405180602001604052805f815250611238565b8061121784611c06565b604051602001611228929190612480565b6040516020818303038152906040525b9392505050565b6112476117a0565b855f0361126a576040516310d34d9b60e31b81526004810187905260240161061c565b845f0361128d5760405163820f079560e01b81526004810186905260240161061c565b835f036112b057604051632c949d6160e01b81526004810185905260240161061c565b4283116112d957604051631943ae1760e31b81524260048201526024810184905260440161061c565b5f8190036112fa5760405163cd93a64160e01b815260040160405180910390fd5b5f60646113078688612418565b611312906050612418565b61131c9190612494565b90505f61132833610f01565b335f90815260096020526040902054611341919061242f565b90508181101561136e57604051632c1f8ef160e21b8152600481018290526024810183905260440161061c565b5f8667ffffffffffffffff8111156113885761138861220d565b6040519080825280602002602001820160405280156113b1578160200160208202803683370190505b5090505f5b8781101561142a575f816113cd8d620f4240612418565b6113d79190612442565b90506113e33382611c96565b5f8c8152600b60209081526040822080546001810182559083529120018190558083838151811061141657611416612455565b6020908102919091010152506001016113b6565b50335f908152600960205260408120805485929061144990849061242f565b925050819055506040518061014001604052808a8152602001898152602001888152602001878152602001336001600160a01b0316815260200184815260200160011515815260200188815260200186868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92018290525093855250505060209182018490528c81526008808352604091829020845181559284015160018401559083015160028301556060830151600383015560808301516004830180546001600160a01b0319166001600160a01b0390921691909117905560a0830151600583015560c083015160068301805460ff191691151591909117905560e083015160078301556101008301519082019061156b90826124f7565b506101208201518051611588916009840191602090910190611f9a565b5050335f908152600a60209081526040822080546001810182559083529120018b905550897ffe45ceffbdf47bd47a5f6bae93b3b6474930aa871228eb8822e0d8f166c5a7d98a8a8a89896040516115e49594939291906125b2565b60405180910390a25050506115f96001600755565b50505050505050565b6001600160a01b039182165f90815260056020908152604080832093909416825291909152205460ff1690565b611637611908565b6001600160a01b03811661166057604051631e4fbdf760e01b81525f600482015260240161061c565b610af781611935565b5f818152600260205260408120546001600160a01b03168061052c57604051637e27328960e01b81526004810184905260240161061c565b6108b98383836001611cf7565b5f828152600260205260408120546001600160a01b03908116908316156116da576116da818486611dfb565b6001600160a01b03811615611714576116f55f855f80611cf7565b6001600160a01b0381165f90815260036020526040902080545f190190555b6001600160a01b03851615611742576001600160a01b0385165f908152600360205260409020805460010190555b5f8481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6002600754036117c357604051633ee5aeb560e01b815260040160405180910390fd5b6002600755565b5f818152600b60205260408120805482036118015760405163c7bcc1b960e01b8152600160048201525f602482015260440161061c565b80545f9082906118139060019061242f565b8154811061182357611823612455565b905f5260205f20015490508180548061183e5761183e6125f5565b600190038181905f5260205f20015f905590558092505050919050565b6001600160a01b03821661188457604051633250574960e11b81525f600482015260240161061c565b5f61189083835f6116ae565b90506001600160a01b0381166118bc57604051637e27328960e01b81526004810183905260240161061c565b836001600160a01b0316816001600160a01b03161461067f576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161061c565b6006546001600160a01b03163314610b975760405163118cdaa760e01b815233600482015260240161061c565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0382166119b857604051630b61174360e31b81526001600160a01b038316600482015260240161061c565b6001600160a01b038381165f81815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0382165f908152600a60205260408120905b815481101561067f5782828281548110611a5957611a59612455565b905f5260205f20015403611ad65781548290611a779060019061242f565b81548110611a8757611a87612455565b905f5260205f200154828281548110611aa257611aa2612455565b905f5260205f20018190555081805480611abe57611abe6125f5565b600190038181905f5260205f20015f9055905561067f565b600101611a3d565b6001600160a01b0383163b15611bff57604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290611b20908890889087908790600401612609565b6020604051808303815f875af1925050508015611b5a575060408051601f3d908101601f19168201909252611b5791810190612645565b60015b611bc1573d808015611b87576040519150601f19603f3d011682016040523d82523d5f602084013e611b8c565b606091505b5080515f03611bb957604051633250574960e11b81526001600160a01b038516600482015260240161061c565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14611bfd57604051633250574960e11b81526001600160a01b038516600482015260240161061c565b505b5050505050565b60605f611c1283611e5f565b60010190505f8167ffffffffffffffff811115611c3157611c3161220d565b6040519080825280601f01601f191660200182016040528015611c5b576020820181803683370190505b5090508181016020015b5f19016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611c6557509392505050565b6001600160a01b038216611cbf57604051633250574960e11b81525f600482015260240161061c565b5f611ccb83835f6116ae565b90506001600160a01b038116156108b9576040516339e3563760e11b81525f600482015260240161061c565b8080611d0b57506001600160a01b03821615155b15611dcc575f611d1a84611669565b90506001600160a01b03831615801590611d465750826001600160a01b0316816001600160a01b031614155b8015611d595750611d578184611602565b155b15611d825760405163a9fbf51f60e01b81526001600160a01b038416600482015260240161061c565b8115611dca5783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b50505f90815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b611e06838383611f36565b6108b9576001600160a01b038316611e3457604051637e27328960e01b81526004810182905260240161061c565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161061c565b5f8072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611e9d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611ec9576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611ee757662386f26fc10000830492506010015b6305f5e1008310611eff576305f5e100830492506008015b6127108310611f1357612710830492506004015b60648310611f25576064830492506002015b600a831061052c5760010192915050565b5f6001600160a01b03831615801590611f925750826001600160a01b0316846001600160a01b03161480611f6f5750611f6f8484611602565b80611f9257505f828152600460205260409020546001600160a01b038481169116145b949350505050565b828054828255905f5260205f20908101928215611fd3579160200282015b82811115611fd3578251825591602001919060010190611fb8565b50611fdf929150611fe3565b5090565b5b80821115611fdf575f8155600101611fe4565b6001600160e01b031981168114610af7575f80fd5b5f6020828403121561201c575f80fd5b813561123881611ff7565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6112386020830184612027565b5f60208284031215612077575f80fd5b5035919050565b80356001600160a01b0381168114612094575f80fd5b919050565b5f80604083850312156120aa575f80fd5b6120b38361207e565b946020939093013593505050565b5f805f606084860312156120d3575f80fd5b6120dc8461207e565b92506120ea6020850161207e565b929592945050506040919091013590565b5f806040838503121561210c575f80fd5b50508035926020909101359150565b89815288602082015287604082015286606082015260018060a01b03861660808201528460a082015283151560c08201528260e08201526101206101008201525f61216a610120830184612027565b9b9a5050505050505050505050565b5f60208284031215612189575f80fd5b6112388261207e565b602080825282518282018190525f918401906040840190835b818110156121c95783518352602093840193909201916001016121ab565b509095945050505050565b5f80604083850312156121e5575f80fd5b6121ee8361207e565b915060208301358015158114612202575f80fd5b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f805f8060808587031215612234575f80fd5b61223d8561207e565b935061224b6020860161207e565b925060408501359150606085013567ffffffffffffffff81111561226d575f80fd5b8501601f8101871361227d575f80fd5b803567ffffffffffffffff8111156122975761229761220d565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156122c6576122c661220d565b6040528181528282016020018910156122dd575f80fd5b816020840160208301375f6020838301015280935050505092959194509250565b5f805f805f805f60c0888a031215612314575f80fd5b873596506020880135955060408801359450606088013593506080880135925060a088013567ffffffffffffffff81111561234d575f80fd5b8801601f81018a1361235d575f80fd5b803567ffffffffffffffff811115612373575f80fd5b8a6020828401011115612384575f80fd5b602082019350809250505092959891949750929550565b5f80604083850312156123ac575f80fd5b6123b58361207e565b91506123c36020840161207e565b90509250929050565b600181811c908216806123e057607f821691505b6020821081036123fe57634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761052c5761052c612404565b8181038181111561052c5761052c612404565b8082018082111561052c5761052c612404565b634e487b7160e01b5f52603260045260245ffd5b5f81518060208401855e5f93019283525090919050565b5f611f9261248e8386612469565b84612469565b5f826124ae57634e487b7160e01b5f52601260045260245ffd5b500490565b601f8211156108b957805f5260205f20601f840160051c810160208510156124d85750805b601f840160051c820191505b81811015611bff575f81556001016124e4565b815167ffffffffffffffff8111156125115761251161220d565b6125258161251f84546123cc565b846124b3565b6020601f821160018114612557575f83156125405750848201515b5f19600385901b1c1916600184901b178455611bff565b5f84815260208120601f198516915b828110156125865787850151825560209485019460019092019101612566565b50848210156125a357868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b85815284602082015283604082015260806060820152816080820152818360a08301375f81830160a090810191909152601f909201601f19160101949350505050565b634e487b7160e01b5f52603160045260245ffd5b6001600160a01b03858116825284166020820152604081018390526080606082018190525f9061263b90830184612027565b9695505050505050565b5f60208284031215612655575f80fd5b815161123881611ff756fea2646970667358221220540959cf432fb6c60ad35ee0f59ac3c0fddd9e8ad7193e0a011525fe983d9e2c64736f6c634300081a0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_MIN_DEPOSIT = "MIN_DEPOSIT";

    public static final String FUNC_MIN_LOCK_PERCENTAGE = "MIN_LOCK_PERCENTAGE";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_CALCULATELOCKEDCOLLATERAL = "calculateLockedCollateral";

    public static final String FUNC_CREATEINVOICETOKEN = "createInvoiceToken";

    public static final String FUNC_DEPOSITCOLLATERAL = "depositCollateral";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETCOMPANYACTIVEINVOICES = "getCompanyActiveInvoices";

    public static final String FUNC_GETPURCHASEDTOKENS = "getPurchasedTokens";

    public static final String FUNC_INVOICES = "invoices";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PURCHASETOKEN = "purchaseToken";

    public static final String FUNC_REDEEMTOKENS = "redeemTokens";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_WITHDRAWCOLLATERAL = "withdrawCollateral";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event COLLATERALDEPOSITED_EVENT = new Event("CollateralDeposited", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event COLLATERALWITHDRAWN_EVENT = new Event("CollateralWithdrawn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event INVOICETOKENCREATED_EVENT = new Event("InvoiceTokenCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event INVOICETOKENPURCHASED_EVENT = new Event("InvoiceTokenPurchased", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event INVOICETOKENPURCHASEDBACK_EVENT = new Event("InvoiceTokenPurchasedback", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TOKENSREDEEMED_EVENT = new Event("TokensRedeemed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected InvoiceFinancingToken(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected InvoiceFinancingToken(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected InvoiceFinancingToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected InvoiceFinancingToken(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<CollateralDepositedEventResponse> getCollateralDepositedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(COLLATERALDEPOSITED_EVENT, transactionReceipt);
        ArrayList<CollateralDepositedEventResponse> responses = new ArrayList<CollateralDepositedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CollateralDepositedEventResponse typedResponse = new CollateralDepositedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.company = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CollateralDepositedEventResponse getCollateralDepositedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(COLLATERALDEPOSITED_EVENT, log);
        CollateralDepositedEventResponse typedResponse = new CollateralDepositedEventResponse();
        typedResponse.log = log;
        typedResponse.company = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<CollateralDepositedEventResponse> collateralDepositedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCollateralDepositedEventFromLog(log));
    }

    public Flowable<CollateralDepositedEventResponse> collateralDepositedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(COLLATERALDEPOSITED_EVENT));
        return collateralDepositedEventFlowable(filter);
    }

    public static List<CollateralWithdrawnEventResponse> getCollateralWithdrawnEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(COLLATERALWITHDRAWN_EVENT, transactionReceipt);
        ArrayList<CollateralWithdrawnEventResponse> responses = new ArrayList<CollateralWithdrawnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CollateralWithdrawnEventResponse typedResponse = new CollateralWithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.company = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CollateralWithdrawnEventResponse getCollateralWithdrawnEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(COLLATERALWITHDRAWN_EVENT, log);
        CollateralWithdrawnEventResponse typedResponse = new CollateralWithdrawnEventResponse();
        typedResponse.log = log;
        typedResponse.company = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<CollateralWithdrawnEventResponse> collateralWithdrawnEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCollateralWithdrawnEventFromLog(log));
    }

    public Flowable<CollateralWithdrawnEventResponse> collateralWithdrawnEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(COLLATERALWITHDRAWN_EVENT));
        return collateralWithdrawnEventFlowable(filter);
    }

    public static List<InvoiceTokenCreatedEventResponse> getInvoiceTokenCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVOICETOKENCREATED_EVENT, transactionReceipt);
        ArrayList<InvoiceTokenCreatedEventResponse> responses = new ArrayList<InvoiceTokenCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvoiceTokenCreatedEventResponse typedResponse = new InvoiceTokenCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.totalAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokensTotal = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.ipfsDocumentHash = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvoiceTokenCreatedEventResponse getInvoiceTokenCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVOICETOKENCREATED_EVENT, log);
        InvoiceTokenCreatedEventResponse typedResponse = new InvoiceTokenCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.totalAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.tokensTotal = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.ipfsDocumentHash = (String) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<InvoiceTokenCreatedEventResponse> invoiceTokenCreatedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvoiceTokenCreatedEventFromLog(log));
    }

    public Flowable<InvoiceTokenCreatedEventResponse> invoiceTokenCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVOICETOKENCREATED_EVENT));
        return invoiceTokenCreatedEventFlowable(filter);
    }

    public static List<InvoiceTokenPurchasedEventResponse> getInvoiceTokenPurchasedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVOICETOKENPURCHASED_EVENT, transactionReceipt);
        ArrayList<InvoiceTokenPurchasedEventResponse> responses = new ArrayList<InvoiceTokenPurchasedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvoiceTokenPurchasedEventResponse typedResponse = new InvoiceTokenPurchasedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.paymentAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvoiceTokenPurchasedEventResponse getInvoiceTokenPurchasedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVOICETOKENPURCHASED_EVENT, log);
        InvoiceTokenPurchasedEventResponse typedResponse = new InvoiceTokenPurchasedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.buyer = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.paymentAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<InvoiceTokenPurchasedEventResponse> invoiceTokenPurchasedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvoiceTokenPurchasedEventFromLog(log));
    }

    public Flowable<InvoiceTokenPurchasedEventResponse> invoiceTokenPurchasedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVOICETOKENPURCHASED_EVENT));
        return invoiceTokenPurchasedEventFlowable(filter);
    }

    public static List<InvoiceTokenPurchasedbackEventResponse> getInvoiceTokenPurchasedbackEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INVOICETOKENPURCHASEDBACK_EVENT, transactionReceipt);
        ArrayList<InvoiceTokenPurchasedbackEventResponse> responses = new ArrayList<InvoiceTokenPurchasedbackEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvoiceTokenPurchasedbackEventResponse typedResponse = new InvoiceTokenPurchasedbackEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.buyer = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.paymentAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InvoiceTokenPurchasedbackEventResponse getInvoiceTokenPurchasedbackEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INVOICETOKENPURCHASEDBACK_EVENT, log);
        InvoiceTokenPurchasedbackEventResponse typedResponse = new InvoiceTokenPurchasedbackEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.buyer = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.paymentAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InvoiceTokenPurchasedbackEventResponse> invoiceTokenPurchasedbackEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInvoiceTokenPurchasedbackEventFromLog(log));
    }

    public Flowable<InvoiceTokenPurchasedbackEventResponse> invoiceTokenPurchasedbackEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVOICETOKENPURCHASEDBACK_EVENT));
        return invoiceTokenPurchasedbackEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TokensRedeemedEventResponse> getTokensRedeemedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TOKENSREDEEMED_EVENT, transactionReceipt);
        ArrayList<TokensRedeemedEventResponse> responses = new ArrayList<TokensRedeemedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokensRedeemedEventResponse typedResponse = new TokensRedeemedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.redemptionAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TokensRedeemedEventResponse getTokensRedeemedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TOKENSREDEEMED_EVENT, log);
        TokensRedeemedEventResponse typedResponse = new TokensRedeemedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.redemptionAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<TokensRedeemedEventResponse> tokensRedeemedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTokensRedeemedEventFromLog(log));
    }

    public Flowable<TokensRedeemedEventResponse> tokensRedeemedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENSREDEEMED_EVENT));
        return tokensRedeemedEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> MIN_DEPOSIT() {
        final Function function = new Function(FUNC_MIN_DEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MIN_LOCK_PERCENTAGE() {
        final Function function = new Function(FUNC_MIN_LOCK_PERCENTAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> calculateLockedCollateral(String _company) {
        final Function function = new Function(FUNC_CALCULATELOCKEDCOLLATERAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _company)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createInvoiceToken(BigInteger _invoiceId,
            BigInteger _totalInvoiceAmount, BigInteger _tokenPrice, BigInteger _tokensTotal,
            BigInteger _maturityDate, String _ipfsDocumentHash, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_CREATEINVOICETOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_invoiceId), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalInvoiceAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokensTotal), 
                new org.web3j.abi.datatypes.generated.Uint256(_maturityDate), 
                new org.web3j.abi.datatypes.Utf8String(_ipfsDocumentHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> depositCollateral(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_DEPOSITCOLLATERAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getCompanyActiveInvoices(String company) {
        final Function function = new Function(FUNC_GETCOMPANYACTIVEINVOICES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, company)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getPurchasedTokens(String user) {
        final Function function = new Function(FUNC_GETPURCHASEDTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, Boolean, BigInteger, String>> invoices(
            BigInteger param0) {
        final Function function = new Function(FUNC_INVOICES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, Boolean, BigInteger, String>>(function,
                new Callable<Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, Boolean, BigInteger, String>>() {
                    @Override
                    public Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, Boolean, BigInteger, String> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, Boolean, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (String) results.get(8).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> purchaseToken(BigInteger _invoiceId,
            BigInteger _tokenAmount, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PURCHASETOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_invoiceId), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> redeemTokens(BigInteger _invoiceId) {
        final Function function = new Function(
                FUNC_REDEEMTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_invoiceId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator,
            Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawCollateral(BigInteger _amount) {
        final Function function = new Function(
                FUNC_WITHDRAWCOLLATERAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static InvoiceFinancingToken load(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new InvoiceFinancingToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static InvoiceFinancingToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new InvoiceFinancingToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static InvoiceFinancingToken load(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        return new InvoiceFinancingToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static InvoiceFinancingToken load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new InvoiceFinancingToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<InvoiceFinancingToken> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(InvoiceFinancingToken.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<InvoiceFinancingToken> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(InvoiceFinancingToken.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<InvoiceFinancingToken> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(InvoiceFinancingToken.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<InvoiceFinancingToken> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(InvoiceFinancingToken.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class CollateralDepositedEventResponse extends BaseEventResponse {
        public String company;

        public BigInteger amount;
    }

    public static class CollateralWithdrawnEventResponse extends BaseEventResponse {
        public String company;

        public BigInteger amount;
    }

    public static class InvoiceTokenCreatedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public BigInteger totalAmount;

        public BigInteger tokenPrice;

        public BigInteger tokensTotal;

        public String ipfsDocumentHash;
    }

    public static class InvoiceTokenPurchasedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String buyer;

        public BigInteger tokenAmount;

        public BigInteger paymentAmount;
    }

    public static class InvoiceTokenPurchasedbackEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String buyer;

        public BigInteger paymentAmount;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TokensRedeemedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String user;

        public BigInteger tokenAmount;

        public BigInteger redemptionAmount;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
